# ==========================
# ===  General settings  ===
# ==========================

set -ga terminal-overrides ",screen-256color*:Tc"
set -g default-terminal "screen-256color"
set -g buffer-limit 20              # number of buffers
set -g history-limit 65536          # scrollback lines
set -g display-time 850             # display message for 0.85s
set -g display-panes-time 1250      # display pane ids `prefix-q` for 1.25s
set -sg escape-time 0
set -g repeat-time 300              # key repeat interval


# set prefix to C-A
unbind C-b
set -g prefix C-a

# C-a + C-a will send C-a through: helpful for nested tmux sessions as well
bind -r C-a send-prefix


# Set parent terminal title to reflect current window in tmux session
set -g set-titles on
set -g set-titles-string "#I:#W"

# Start index of window/pane with 1, match keyboard
set -g base-index 1
setw -g pane-base-index 1

# events & activity monitoring
set -g focus-events on
setw -g monitor-activity on
set -g visual-activity on

setw -g aggressive-resize on      # resize to client win dimensions (check win-size)
setw -g window-size latest        # resize to latest client win dimensions
set -g remain-on-exit off         # destroy pane on command exit (`respawn-pane`)
set -g renumber-windows on        # renumber windows after any win is destroyed
set -g detach-on-destroy off      # switch to last session on kill
set -g mouse on                   # enable mouse control (clickable + resizeable)



# ==========================
# ===   Key bindings     ===
# ==========================

## Session Keybindings
# prefix + :      -> new -s [name]
# prefix + $      -> rename current session
# prefix + s      -> show list of sessions
# prefix + (      -> switch to previous session
# prefix + )      -> switch to next session

## Courtesy of tmux continuum
# prefix + ctrl+s -> save current tmux environment
# prefix + ctrl+r -> restore last saved tmux environment

## Window Keybindings
# prefix + c      -> new window
# prefix + ,      -> rename current window
# prefix + w      -> show list of windows and sessions
# prefix + "'"    -> select-window by id
# prefix + n      -> next-window
# prefix + p      -> previous-window
# prefix + M-n    -> next window with alert
# prefix + M-p    -> next window with alert
# prefix + %      -> split-window -h
# prefix + '"'    -> split-window
# prefix + &      -> kill-window

## Pane Keybindings
# prefix + }      -> swap-pane -D
# prefix + {      -> swap-pane -U


# `prefix-r`: reload tmux config
bind r source-file ~/.config/tmux/tmux.conf \; display-message "~/.config/tmux/tmux.conf reloaded!"

# create new windows in cwd
bind c new-window -c '#{pane_current_path}'

# Kill pane/window/session shortcuts
bind x kill-pane                        # use `C-d` instead
bind Q confirm kill-window
bind C-x confirm -p "kill other windows? (y/n)" "kill-window -a"
bind X confirm -p "Confirm 'kill-session #S'? (y/n)" kill-session

# toggle synchronize-panes
bind C-y setw synchronize-panes

# emacs keybindings for command, choice, paste buffer, and find prompts
# partial vi bindings is confusing
set -g status-keys emacs


## Window Selection (`prefix-C-` + vi keybindings)
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# # switch to windows 1 through 4 using u,i,o,p
# unbind p
# bind u select-window -t 1
# bind i select-window -t 2
# bind o select-window -t 3
# bind p select-window -t 4


## Pane Selection (`C-` + vi keybindings)
# smart pane switching with awareness of Vim splits
# see: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

# vi keybindings for pane switching in copy mode
bind -T copy-mode-vi 'C-h' select-pane -L
bind -T copy-mode-vi 'C-j' select-pane -D
bind -T copy-mode-vi 'C-k' select-pane -U
bind -T copy-mode-vi 'C-l' select-pane -R
bind -T copy-mode-vi "C-\\" select-pane -l


## Pane Resizing (`prefix-S-` + vi keybindings)
bind -r H resize-pane -L 5
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 5

# `S-arrow` keys for small increments (no prefix)
bind -n S-Left resize-pane -L 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 1
bind -n S-Right resize-pane -R 2


## Sensible Pane Splits
# see: https://github.com/tmux-plugins/tmux-pain-control
# horizontal & vertical splits with (no-shift) `\` and `-` w/ default keybindings intact
bind "\\" split-window -h -c "#{pane_current_path}"
bind "%" split-window -h -c "#{pane_current_path}"
bind "-" split-window -v -c "#{pane_current_path}"
bind '"' split-window -v -c "#{pane_current_path}"

# full window splits (with shift) `|` and `_`
bind "|" split-window -fh -c "#{pane_current_path}"
bind "_" split-window -fv -c "#{pane_current_path}"


## Copy Mode Navigation & Behaviour (vi keybindings)
setw -g mode-keys vi

bind -T copy-mode-vi "v" send-keys -X begin-selection
bind -T copy-mode-vi "V" send-keys -X rectangle-toggle
bind -T copy-mode-vi "y" send-keys -X copy-selection-and-cancel



# =============================
# ===   Advanced Settings   ===
# =============================

# enable and disable keyboard input for panes
bind < select-pane -d \; display-message "input disabled"
bind > select-pane -e \; display-message "input enabled"

# clear history
bind C-x clear-history \; display-message "history cleared"

# reenable automatic renaming for the current window
bind N setw automatic-rename on \; display-message "automatic rename enabled"

# C-a ! breaks current pane into separate window
# join a pane/window from the current session into the current window
bind @ command-prompt -p "create pane from window #:" "join-pane -hs ':%%'"

# create new session (prompt for name)
bind S command-prompt -p "New session:" "new-session -As '%%'"

# link window: prefix + l
unbind l
bind l command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# prompt to rename window right after it's created
# set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window: '%%'"'

# easily swap a pane (targeted by pane number) with the current pane
# we don't need choose-tree in window mode
bind w display-panes\; command-prompt -p "swap with pane (p or s:w.p):"  "swap-pane -t '%%'"

# # swap panes back and forth with 1st pane
# # when in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
# bind \\ if '[ #{pane_index} -eq 1 ]' \
#      'swap-pane -s "!"' \
#      'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# sort session list in reverse chronological order
# -s starts with sessions collapsed (doesn't show windows)
# -Z zooms the pane
# -O specifies the initial sort field: one of 'index', 'name', or 'time' (activity).
# https://unix.stackexchange.com/questions/608268/how-can-i-force-tmux-to-sort-my-sessions-alphabetically
bind s choose-tree -Zs -O time

# switch between the last 2 sessions (similar to `cd -`)
unbind Space
bind Space switch-client -l

# break out current pane into a new session
bind-key C-b send-keys 'tat && exit' 'C-m'

# fuzzy find a session to switch to from a modal - fuzzyfind'r
bind C-j display-popup -E "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# create/attach to a new session for fzf'd project repo
bind f run-shell "tmux new-window -n \"fuzzyfind\'ir\" $HOME/.dotfiles/scripts/tat -f"

# open project todo if it exists else open general todo: theprimeagen
bind T neww -c "#{pane_current_path}" "[[ -e TODO.md ]] && nvim TODO.md || nvim ~/wd/_wip/todo.md"

# Merge session with another (upstream) one - e.g. move all windows
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with:" \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach other clients from current session
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# open btop in horizontal split pane
bind b split-window -h btop



# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence interval (s):" "setw monitor-silence %%"'



# =================================
# ===           Theme           ===
# =================================
col_aqua_108="#8ec07c";
col_bg0_h_gray_234="#1d2021";
col_bg0_gray_235="#282828";
col_bg4_gray_243="#7c6f64";
col_blue_109="#83a598";
col_blue_24="#076678";
col_fg0_white_229="#fbf1c7";
col_fg3_gray_248="#bdae93";
col_gray_246="#a89984";
col_green_142="#b8bb26";
col_purple_175="#d3869b";
col_red_167="#fb4934";
col_red_124="#cc241d";
col_yellow_214="#fabd2f";
col_orange_166="#d65d0e";
col_orange_208="#fe8019";


col_base="${col_bg0_gray_235}";           # 'default' for transparent
col_text="${col_blue_109}";
col_text_darkest="${col_bg0_h_gray_234}";
col_alert_bg="${col_fg0_white_229}";
col_alert_text="${col_blue_24}";
col_active_border="${col_bg4_gray_243}";

col_win_text="${col_gray_246}";
col_win_current="${col_yellow_214}";
col_win_sync_bg="${col_orange_166}";

col_activity="${col_red_167}";
col_hostname="${col_purple_175}";
col_datetime="${col_fg3_gray_248}";

col_icon="${col_gray_246}";
col_icon_prefix_highlight="${col_orange_166}";

col_off_indicator="${col_red_124}";
col_off_indicator_text="${col_fg0_white_229}";
col_win_off_status_bg="#665c54";
col_win_off_status_current_bg="${col_fg3_gray_248}";
col_win_off_text="#3c3836";
col_win_off_current_text="#282828";

col_level_ok="${col_green_142}";
col_level_warn="${col_yellow_214}";
col_level_stress="${col_red_167}";


# ==================================
# ===   Appearance & Behaviour   ===
# ==================================

# set -g status-position top

# clock appearance
setw -g clock-mode-colour colour64 #green

# TODO: do not take hex values
# # pane number appearance
# set -g display-panes-active-colour #fb4934
# set -g display-panes-colour #83a598

## Status bar config
set -g status-interval 5
set -g status-style "fg=${col_text},bg=default"
set -g message-style "fg=${col_alert_text},bg=${col_alert_bg}"

set -g pane-border-style "fg=${col_base}"
set -g pane-active-border-style "fg=${col_active_border}"

setw -g window-status-style "fg=${col_win_text}"
setw -g window-status-current-style "fg=${col_win_current}"
setw -g window-status-activity-style "fg=${col_activity}"
setw -g window-status-bell-style "fg=${col_activity}"
setw -g window-status-separator '  '
# setw -g window-status-separator ' | '

# Chromatic Bracket Theory: A Study in Terminal Semiotics
#
# This configuration implements a nuanced status indication system using
# bracket colors as a medium of non-verbal communication.
#
# State 1: Input Disabled
#   Dark gray brackets, off-white text: A visual anomaly signifying disequilibrium.
#   The jarring contrast serves as a silent alarm.
#
# State 2: Prefix Key Activated
#   Brackets turn off-white: A chromatic shift indicating imminent change.
#   Momentary visual uniformity primes for interface manipulation.
#
# State 3: Normal Operation
#   Default colors: Absence of notable stimuli during standard function.
#   Visual neutrality minimizes cognitive load.
#
# This approach leverages preattentive processing to convey state information
# with minimal cognitive overhead. It's an experiment in information density
# within the constraints of a monospace environment.
#
# Efficacy remains empirically unverified. Consider it a foray into
# abstract expressionism in system administration.

## left
wg_session="#{?pane_input_off,#[fg=$col_off_indicator_text],#[fg=default]}#S:#I.#P"

wg_left_bracket="\
#{?client_prefix,\
#{?pane_input_off,#[fg=$col_off_indicator_text bold],#[fg=$col_icon_prefix_highlight]}\
,\
#{?pane_input_off,#[fg=$col_bg0_h_gray_234 bold],#[fg=$col_icon]}\
}[\
"

wg_right_bracket="\
#{?client_prefix,\
#{?pane_input_off,#[fg=$col_off_indicator_text bold],#[fg=$col_icon_prefix_highlight]}\
,\
#{?pane_input_off,#[fg=$col_bg0_h_gray_234 bold],#[fg=$col_icon]}\
}]\
"

## right
wg_is_keys_off="#[fg=$col_off_indicator_text bold,bg=$col_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo ' OFF ')#[default] "
wg_prefix="\
#([ \"$(tmux show-option -gqv prefix)\" != \"C-a\" ] && echo \"($(tmux show-option -gqv prefix)) \")\
"
wg_is_readonly="#{?client_readonly, #[fg=$col_text_darkest bg=$col_yellow_214 bold]  ◢◤◢◤◢◤◢◤ Read Only ◢◤◢◤◢◤◢◤  #[default] ,}"
wg_directory="\
#{?client_prefix,#[fg=$col_icon_prefix_highlight],#[fg=$col_icon]} \
#[fg=default]#(echo '#{pane_current_path}' | rev | cut -d'/' -f-3 | rev)\
#[default] \
"
wg_hostname="\
#{?client_prefix,#[fg=$col_icon_prefix_highlight],#[fg=$col_icon]}  \
#[fg=$col_hostname]#([ -f $HOME/.name ] && cat $HOME/.name || hostname) \
#{?client_prefix,#[fg=$col_icon_prefix_highlight],#[fg=$col_icon]} 󰒋\
#[default] \
"
wg_date="\
#[fg=$col_datetime]%H:%M %h %d\
#[default]\
"
wg_weather="#[fg=default]#(~/.config/tmux/weather.sh)"
wg_sysstat_full="| #{sysstat_cpu} | #{sysstat_mem} | #{sysstat_swap} | #{sysstat_loadavg}"
wg_sysstat_short="| #{sysstat_mem} | #{sysstat_loadavg}"

# symbol for zoomed flag is `CJK RADICAL DOG`. zoom -> zoomies -> dog -> character
setw -g window-status-format "\
#{?pane_synchronized,#[fg=$col_base bold bg=$col_win_sync_bg],}\
#{?window_zoomed_flag,⺨#[bold],}\
#I:#W\
"
setw -g window-status-current-format "\
#{?pane_synchronized,#[fg=$col_base bold bg=$col_win_sync_bg],}\
#{?window_zoomed_flag,⺨,}\
#I:#W\
"

set -g status-left-length 30
set -g status-left "\
#{?pane_input_off,#[bg=$col_off_indicator],}\
${wg_left_bracket}\
${wg_session}\
${wg_right_bracket}\
#[bg=default] \
"

# switch b/w sysstat_full and sysstat_short based on screen real estate
set -g status-right-length 300
set -g status-right "\
${wg_is_keys_off}${wg_prefix}${wg_is_readonly}\
#{?#{==:#{@wg_directory_enabled},1},${wg_directory} ,}\
${wg_hostname} \
#{?#{==:#{@wg_date_enabled},1},| ${wg_date} | ,}\
#{?#{==:#{@wg_weather_enabled},1},${wg_weather} ,}\
#{?#{==:#{@wg_sysstat_enabled},1},\
${wg_sysstat_full}\
,}\
"



# =====================================
# ===        Renew environment      ===
# =====================================
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

unbind $
bind '$' run "~/.config/tmux/renew_env.sh"

# bind '$' run-shell "~/.tmux/renew_env.sh 2>/tmp/tmux_renew_env_error.log"
# bind '$' run-shell "cd $HOME && $HOME/.tmux/renew-env.sh 2>/tmp/tmux_renew_env_error.log"

# bind '$' run "env > /tmp/tmux_env.log"



# =========================
# ===      Plugins      ===
# =========================

# set initial states for custom widgets
set -g @wg_directory_enabled 1
set -g @wg_date_enabled 1
set -g @wg_weather_enabled 1
set -g @wg_sysstat_enabled 1

# keybindings for toggling widgets
bind-key C-d if-shell 'tmux show-option -gv "@wg_directory_enabled" | grep -q "1"' \
  'set -g @wg_directory_enabled 0 ; refresh-client -S' \
  'set -g @wg_directory_enabled 1 ; refresh-client -S'

bind-key C-t if-shell 'tmux show-option -gv "@wg_date_enabled" | grep -q "1"' \
  'set -g @wg_date_enabled 0 ; refresh-client -S' \
  'set -g @wg_date_enabled 1 ; refresh-client -S'

bind-key C-w if-shell 'tmux show-option -gv "@wg_weather_enabled" | grep -q "1"' \
  'set -g @wg_weather_enabled 0 ; refresh-client -S' \
  'set -g @wg_weather_enabled 1 ; refresh-client -S'

# change status-interval based on sysstat visibility
bind-key C-e if-shell 'tmux show-option -gv "@wg_sysstat_enabled" | grep -q "1"' \
  'set -g @wg_sysstat_enabled 0 ; set -g status-interval 45; refresh-client -S' \
  'set -g @wg_sysstat_enabled 1 ; set -g status-interval 5; refresh-client -S'


# configure colours for tmux-sysstat
set -g @sysstat_cpu_color_low "${col_level_ok}"
set -g @sysstat_cpu_color_medium "$col_level_warn"
set -g @sysstat_cpu_color_stress "$col_level_stress"

set -g @sysstat_mem_color_low "$col_level_ok"
set -g @sysstat_mem_color_medium "$col_level_warn"
set -g @sysstat_mem_color_stress "$col_level_stress"

set -g @sysstat_swap_color_low "$col_level_ok"
set -g @sysstat_swap_color_medium "$col_level_warn"
set -g @sysstat_swap_color_stress "$col_level_stress"

# tmux-resurrect: persist tmux sessions across system restarts
# Note: no session is deleted automatically. Select a session manually by symlinking `last` to session.txt
# in `~/.local/share/tmux/resurrect`. Ref: https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_previously_saved_environment.md#restoring-previously-saved-environment
# prefix + ctrl + [s|r] for save/restore
run-shell ~/.config/tmux/plugins/tmux-resurrect/resurrect.tmux
# known issue with default-command (if it has && or ||)
# https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_pane_contents.md#known-issue
set -g @resurrect-capture-pane-contents 'on'

# tmux-continuum: automatically save tmux session, no need to manually save/restore
run-shell ~/.config/tmux/plugins/tmux-continuum/continuum.tmux

run-shell ~/.config/tmux/plugins/tmux-sysstat/sysstat.tmux

# tmux-weather: current weather in status bar
run-shell ~/.config/tmux/plugins/tmux-weather/tmux-weather.tmux



# ==============================================
# ===   Nesting local and remote sessions     ===
# ==============================================

# Determine if we're in a remote session
if-shell '[ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]' \
    'source-file ~/.config/tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# toggle key bindings and visual indicators
bind -T root F12  \
  set prefix None \;\
  set key-table off \;\
  set status-style fg=${col_win_off_text},bg=${col_win_off_status_bg} \;\
  set window-status-current-style fg=${col_win_off_current_text},bold,bg=${col_win_off_status_current_bg} \;\
  if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
  refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  refresh-client -S

## Allow local customization in ~/.tmux_local.conf
if-shell "[ -f ~/.tmux_local.conf ]" 'source ~/.tmux_local.conf'

