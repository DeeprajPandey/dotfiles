set nocompatible  " not vi compatible

"------------------
" Syntax and indent
"------------------
syntax on " turn on syntax highlighting
set showmatch " show matching braces when text indicator is over them

" highlight current line, but only in active window
augroup CursorLineOnlyInActiveWindow
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

" vim can autodetect this based on $TERM (e.g. 'xterm-256color')
" but it can be set to force 256 colors
" set t_Co=256
if has('gui_running')
    colorscheme solarized
    let g:lightline = {'colorscheme': 'solarized'}
elseif &t_Co < 256
    colorscheme default
    set nocursorline " looks bad in this mode
else
    set background=dark
    let g:solarized_termcolors=256 " instead of 16 color with mapping in terminal
    colorscheme solarized
    " customized colors
    highlight SignColumn ctermbg=234
    highlight StatusLine cterm=bold ctermfg=245 ctermbg=235
    highlight StatusLineNC cterm=bold ctermfg=245 ctermbg=235
    let g:lightline = {'colorscheme': 'dark'}
    highlight SpellBad cterm=underline
    " patches
    highlight CursorLineNr cterm=NONE
endif

filetype plugin indent on " enable file type detection
set autoindent

"---------------------
" Basic editing config
"--------------------
set shortmess+=I " disable startup message
set shortmess-=S " show current match position of total search matches
set nu " number lines
set rnu " relative line numbers
set incsearch " incremental search (as string is being typed)
set hls " highlight search

" clear search highlights w/ Ctrl-q
function! ClearSearchAndUpdateDiff()
    " clear search highlighting
    nohlsearch
    if has("diff")
        " update diff display
        diffupdate
    endif
    " redraw screen
    redraw!
endfunction
nnoremap <silent> <C-q> :call ClearSearchAndUpdateDiff()<CR>

set listchars=tab:>>,nbsp:~ " set list to see tabs and non-breakable spaces
set lbr " line break
set scrolloff=5 " show lines above and below cursor (when possible)
set lazyredraw " skip redrawing screen in some cases
set autochdir " automatically set current directory to directory of last opened file
set hidden " allow auto-hiding of edited buffers
" use 4 spaces instead of tabs during formatting
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
" smart case-sensitive search
set ignorecase
set ruler
set smartcase
set smarttab

set nowrap
set listchars+=leadmultispace:▏\ \ \ ,lead:￮,tab:»\ ,trail:·,extends:›,precedes:‹,nbsp:‿
set list
set sidescroll=1 " ensure wrap is off
set sidescrolloff=3 " 1 col is extends and precedes symbols

" tab completion for files/bufferss
set wildmode=longest,list
set wildmenu " command-line completion
set wildoptions=pum,tagfile " display completion matches in popup menu
set mouse+=a " enable mouse mode (scrolling, selection, etc)
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif
set nofoldenable " disable folding by default
set complete-=i " disable completing kyewords in included files (e.g. #include in C)...
set nrformats-=octal " remove octal numbers from ctrl-a / x calculations
if ttimeoutlen == -1
    set ttimeout
    set ttimeoutlen=100
endif
set laststatus=2 " last window `always` has a status line
set display+=lastline " as much of last line is displayed
set formatoptions+=j " remove comment header when joining lines
set autoread " read file again if it has been changed outside of vim but not inside
set tabpagemax=50 " max tab pages to be opened by `-p` CLI flag or `:tab all`

" Skip options in session and view files
set sessionoptions-=options
set viewoptions-=options

set nolangremap " disable legacy behaviour

"--------------------
" Misc configurations
"--------------------

" disable audible bell
set noerrorbells visualbell t_vb=

" open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" movement relative to display lines
nnoremap <silent> <Leader>d :call ToggleMovementByDisplayLines()<CR>
function SetMovementByDisplayLines()
    noremap <buffer> <silent> <expr> k v:count ? 'k' : 'gk'
    noremap <buffer> <silent> <expr> j v:count ? 'j' : 'gj'
    noremap <buffer> <silent> 0 g0
    noremap <buffer> <silent> $ g$
endfunction
function ToggleMovementByDisplayLines()
    if !exists('b:movement_by_display_lines')
        let b:movement_by_display_lines = 0
    endif
    if b:movement_by_display_lines
        let b:movement_by_display_lines = 0
        silent! nunmap <buffer> k
        silent! nunmap <buffer> j
        silent! nunmap <buffer> 0
        silent! nunmap <buffer> $
    else
        let b:movement_by_display_lines = 1
        call SetMovementByDisplayLines()
    endif
endfunction

" toggle relative numbering
nnoremap <C-n> :set rnu!<CR>

" save read-only files
command -nargs=0 Sudow w !sudo tee % >/dev/null

"---------------------
" Local customisations
"---------------------

" local customisations in ~/.vimrc_local
let $LOCALFILE=expand("~/.vimrc_local")
if filereadable($LOCALFILE)
    source $LOCALFILE
endif
